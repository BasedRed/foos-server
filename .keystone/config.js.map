{
  "version": 3,
  "sources": ["../keystone.ts", "../schema.ts", "../auth.ts"],
  "sourcesContent": ["// Welcome to Keystone!\n//\n// This file is what Keystone uses as the entry-point to your headless backend\n//\n// Keystone imports the default export of this file, expecting a Keystone configuration object\n//   you can find out more at https://keystonejs.com/docs/apis/config\n\nimport { config } from '@keystone-6/core';\n\n// to keep this file tidy, we define our schema in a different file\nimport { lists } from './schema';\n\n// authentication is configured separately here too, but you might move this elsewhere\n// when you write your list-level access control functions, as they typically rely on session data\nimport { withAuth, session } from './auth';\n\nexport default withAuth(\n    config({\n        db: {\n            useMigrations: true,\n            // we're using sqlite for the fastest startup experience\n            //   for more information on what database might be appropriate for you\n            //   see https://keystonejs.com/docs/guides/choosing-a-database#title\n            // provider: 'sqlite',\n            // provider: process.env.NODE_ENV === 'production' ? 'postgresql' : 'mysql',\n            provider: 'postgresql',\n            // url: 'file:./keystone.db',\n            url:\n                process.env.DATABASE_URL ??\n                'postgres://postgres:e-DC4E6CcEbCB3*DbDC332Gg3G15fGEb@roundhouse.proxy.rlwy.net:49040/railway',\n            // url: process.env.NODE_ENV === 'production' ? process.env.DATABASE_URL ?? '' : 'file:./keystone.db',\n        },\n        lists,\n        session,\n    })\n);\n", "// Welcome to your schema\n//   Schema driven development is Keystone's modus operandi\n//\n// This file is where we define the lists, fields and hooks for our data.\n// If you want to learn more about how lists are configured, please read\n// - https://keystonejs.com/docs/config/lists\n\nimport { list } from '@keystone-6/core';\nimport { allowAll } from '@keystone-6/core/access';\n\n// see https://keystonejs.com/docs/fields/overview for the full list of fields\n//   this is a few common fields for an example\nimport { text, relationship, password, timestamp, select } from '@keystone-6/core/fields';\n\n// the document field is a more complicated field, so it has it's own package\nimport { document } from '@keystone-6/fields-document';\n// if you want to make your own fields, see https://keystonejs.com/docs/guides/custom-fields\n\n// when using Typescript, you can refine your types to a stricter subset by importing\n// the generated types from '.keystone/types'\nimport type { Lists } from '.keystone/types';\n\nexport const lists: Lists = {\n    User: list({\n        // WARNING\n        //   for this starter project, anyone can create, query, update and delete anything\n        //   if you want to prevent random people on the internet from accessing your data,\n        //   you can find out more at https://keystonejs.com/docs/guides/auth-and-access-control\n        access: allowAll,\n\n        // this is the fields for our User list\n        fields: {\n            // by adding isRequired, we enforce that every User should have a name\n            //   if no name is provided, an error will be displayed\n            name: text({ validation: { isRequired: true } }),\n\n            email: text({\n                validation: { isRequired: true },\n                // by adding isIndexed: 'unique', we're saying that no user can have the same\n                // email as another user - this may or may not be a good idea for your project\n                isIndexed: 'unique',\n            }),\n\n            password: password({ validation: { isRequired: true } }),\n\n            matchesWon: relationship({ ref: 'Match.winner', many: true }),\n            matchesLost: relationship({ ref: 'Match.loser', many: true }),\n\n            createdAt: timestamp({\n                // this sets the timestamp to Date.now() when the user is first created\n                defaultValue: { kind: 'now' },\n            }),\n        },\n    }),\n\n    Match: list({\n        // WARNING\n        //   for this starter project, anyone can create, query, update and delete anything\n        //   if you want to prevent random people on the internet from accessing your data,\n        //   you can find out more at https://keystonejs.com/docs/guides/auth-and-access-control\n        access: allowAll,\n\n        // this is the fields for our Post list\n        fields: {\n            date: timestamp({\n                // this sets the timestamp to Date.now() when the user is first created\n                defaultValue: { kind: 'now' },\n            }),\n\n            game: relationship({ ref: 'Game.matches' }),\n\n            winner: relationship({\n                ref: 'User.matchesWon',\n\n                // this is some customisations for changing how this will look in the AdminUI\n                ui: {\n                    displayMode: 'select',\n                    hideCreate: true,\n                },\n\n                // a Match can only have one winner\n                many: false,\n                hooks: {},\n            }),\n\n            winnerScore: select({\n                type: 'integer',\n                validation: {\n                    isRequired: true,\n                },\n                options: [\n                    { value: 0, label: '0' },\n                    { value: 1, label: '1' },\n                    { value: 2, label: '2' },\n                    { value: 3, label: '3' },\n                    { value: 4, label: '4' },\n                    { value: 5, label: '5' },\n                    { value: 6, label: '6' },\n                    { value: 7, label: '7' },\n                    { value: 8, label: '8' },\n                ],\n                label: 'Winner Score',\n                defaultValue: 8,\n            }),\n\n            loser: relationship({\n                // we could have used 'User', but then the relationship would only be 1-way\n                ref: 'User.matchesLost',\n\n                // this is some customisations for changing how this will look in the AdminUI\n                ui: {\n                    displayMode: 'select',\n                    hideCreate: true,\n                },\n\n                //a Match can only have two particpants\n                many: false,\n\n                hooks: {\n                    // Custom validation function to check if winner and loser are different players\n                    // Validating before creation\n                    validateInput: async ({ item, resolvedData, addValidationError, operation }) => {\n                        if (!resolvedData.game?.connect?.id) {\n                            addValidationError('Every match has to be assigned to a game');\n                        }\n\n                        if (operation === 'create') {\n                            if (resolvedData.winner?.connect?.id === resolvedData.loser?.connect?.id) {\n                                addValidationError('Winner and loser must be different players');\n                            }\n                        }\n\n                        if (operation === 'update') {\n                            if (\n                                resolvedData.winner?.connect?.id === item?.loserId ||\n                                resolvedData.loser?.connect?.id === item?.winnerId\n                            ) {\n                                addValidationError('Winner and loser must be different players');\n                            }\n                        }\n                    },\n                },\n            }),\n\n            loserScore: select({\n                type: 'integer',\n                validation: {\n                    isRequired: true,\n                },\n                options: [\n                    { value: 0, label: '0' },\n                    { value: 1, label: '1' },\n                    { value: 2, label: '2' },\n                    { value: 3, label: '3' },\n                    { value: 4, label: '4' },\n                    { value: 5, label: '5' },\n                    { value: 6, label: '6' },\n                    { value: 7, label: '7' },\n                    { value: 8, label: '8' },\n                ],\n                label: 'Loser Score',\n            }),\n        },\n    }),\n\n    Game: list({\n        // WARNING\n        //   for this starter project, anyone can create, query, update and delete anything\n        //   if you want to prevent random people on the internet from accessing your data,\n        //   you can find out more at https://keystonejs.com/docs/guides/auth-and-access-control\n        access: allowAll,\n\n        // this is the fields for our Post list\n        fields: {\n            title: text({ validation: { isRequired: true } }),\n            matches: relationship({ ref: 'Match.game', many: true }),\n\n            date: timestamp({\n                // this sets the timestamp to Date.now() when the user is first created\n                defaultValue: { kind: 'now' },\n            }),\n        },\n    }),\n};\n", "// Welcome to some authentication for Keystone\n//\n// This is using @keystone-6/auth to add the following\n// - A sign-in page for your Admin UI\n// - A cookie-based stateless session strategy\n//    - Using a User email as the identifier\n//    - 30 day cookie expiration\n//\n// This file does not configure what Users can do, and the default for this starter\n// project is to allow anyone - logged-in or not - to do anything.\n//\n// If you want to prevent random people on the internet from accessing your data,\n// you can find out how by reading https://keystonejs.com/docs/guides/auth-and-access-control\n//\n// If you want to learn more about how our out-of-the-box authentication works, please\n// read https://keystonejs.com/docs/apis/auth#authentication-api\n\nimport { randomBytes } from 'crypto';\nimport { createAuth } from '@keystone-6/auth';\n\n// see https://keystonejs.com/docs/apis/session for the session docs\nimport { statelessSessions } from '@keystone-6/core/session';\n\n// for a stateless session, a SESSION_SECRET should always be provided\n//   especially in production (statelessSessions will throw if SESSION_SECRET is undefined)\nlet sessionSecret = process.env.SESSION_SECRET;\nif (!sessionSecret && process.env.NODE_ENV !== 'production') {\n  sessionSecret = randomBytes(32).toString('hex');\n}\n\n// withAuth is a function we can use to wrap our base configuration\nconst { withAuth } = createAuth({\n  listKey: 'User',\n  identityField: 'email',\n\n  // this is a GraphQL query fragment for fetching what data will be attached to a context.session\n  //   this can be helpful for when you are writing your access control functions\n  //   you can find out more at https://keystonejs.com/docs/guides/auth-and-access-control\n  sessionData: 'name createdAt',\n  secretField: 'password',\n\n  // WARNING: remove initFirstItem functionality in production\n  //   see https://keystonejs.com/docs/config/auth#init-first-item for more\n  initFirstItem: {\n    // if there are no items in the database, by configuring this field\n    //   you are asking the Keystone AdminUI to create a new user\n    //   providing inputs for these fields\n    fields: ['name', 'email', 'password'],\n\n    // it uses context.sudo() to do this, which bypasses any access control you might have\n    //   you shouldn't use this in production\n  },\n});\n\n// statelessSessions uses cookies for session tracking\n//   these cookies have an expiry, in seconds\n//   we use an expiry of 30 days for this starter\nconst sessionMaxAge = 60 * 60 * 24 * 30;\n\n// you can find out more at https://keystonejs.com/docs/apis/session#session-api\nconst session = statelessSessions({\n  maxAge: sessionMaxAge,\n  secret: sessionSecret!,\n});\n\nexport { withAuth, session };\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA,IAAAA,eAAuB;;;ACAvB,kBAAqB;AACrB,oBAAyB;AAIzB,oBAAgE;AAUzD,IAAM,QAAe;AAAA,EACxB,UAAM,kBAAK;AAAA;AAAA;AAAA;AAAA;AAAA,IAKP,QAAQ;AAAA;AAAA,IAGR,QAAQ;AAAA;AAAA;AAAA,MAGJ,UAAM,oBAAK,EAAE,YAAY,EAAE,YAAY,KAAK,EAAE,CAAC;AAAA,MAE/C,WAAO,oBAAK;AAAA,QACR,YAAY,EAAE,YAAY,KAAK;AAAA;AAAA;AAAA,QAG/B,WAAW;AAAA,MACf,CAAC;AAAA,MAED,cAAU,wBAAS,EAAE,YAAY,EAAE,YAAY,KAAK,EAAE,CAAC;AAAA,MAEvD,gBAAY,4BAAa,EAAE,KAAK,gBAAgB,MAAM,KAAK,CAAC;AAAA,MAC5D,iBAAa,4BAAa,EAAE,KAAK,eAAe,MAAM,KAAK,CAAC;AAAA,MAE5D,eAAW,yBAAU;AAAA;AAAA,QAEjB,cAAc,EAAE,MAAM,MAAM;AAAA,MAChC,CAAC;AAAA,IACL;AAAA,EACJ,CAAC;AAAA,EAED,WAAO,kBAAK;AAAA;AAAA;AAAA;AAAA;AAAA,IAKR,QAAQ;AAAA;AAAA,IAGR,QAAQ;AAAA,MACJ,UAAM,yBAAU;AAAA;AAAA,QAEZ,cAAc,EAAE,MAAM,MAAM;AAAA,MAChC,CAAC;AAAA,MAED,UAAM,4BAAa,EAAE,KAAK,eAAe,CAAC;AAAA,MAE1C,YAAQ,4BAAa;AAAA,QACjB,KAAK;AAAA;AAAA,QAGL,IAAI;AAAA,UACA,aAAa;AAAA,UACb,YAAY;AAAA,QAChB;AAAA;AAAA,QAGA,MAAM;AAAA,QACN,OAAO,CAAC;AAAA,MACZ,CAAC;AAAA,MAED,iBAAa,sBAAO;AAAA,QAChB,MAAM;AAAA,QACN,YAAY;AAAA,UACR,YAAY;AAAA,QAChB;AAAA,QACA,SAAS;AAAA,UACL,EAAE,OAAO,GAAG,OAAO,IAAI;AAAA,UACvB,EAAE,OAAO,GAAG,OAAO,IAAI;AAAA,UACvB,EAAE,OAAO,GAAG,OAAO,IAAI;AAAA,UACvB,EAAE,OAAO,GAAG,OAAO,IAAI;AAAA,UACvB,EAAE,OAAO,GAAG,OAAO,IAAI;AAAA,UACvB,EAAE,OAAO,GAAG,OAAO,IAAI;AAAA,UACvB,EAAE,OAAO,GAAG,OAAO,IAAI;AAAA,UACvB,EAAE,OAAO,GAAG,OAAO,IAAI;AAAA,UACvB,EAAE,OAAO,GAAG,OAAO,IAAI;AAAA,QAC3B;AAAA,QACA,OAAO;AAAA,QACP,cAAc;AAAA,MAClB,CAAC;AAAA,MAED,WAAO,4BAAa;AAAA;AAAA,QAEhB,KAAK;AAAA;AAAA,QAGL,IAAI;AAAA,UACA,aAAa;AAAA,UACb,YAAY;AAAA,QAChB;AAAA;AAAA,QAGA,MAAM;AAAA,QAEN,OAAO;AAAA;AAAA;AAAA,UAGH,eAAe,OAAO,EAAE,MAAM,cAAc,oBAAoB,UAAU,MAAM;AAC5E,gBAAI,CAAC,aAAa,MAAM,SAAS,IAAI;AACjC,iCAAmB,0CAA0C;AAAA,YACjE;AAEA,gBAAI,cAAc,UAAU;AACxB,kBAAI,aAAa,QAAQ,SAAS,OAAO,aAAa,OAAO,SAAS,IAAI;AACtE,mCAAmB,4CAA4C;AAAA,cACnE;AAAA,YACJ;AAEA,gBAAI,cAAc,UAAU;AACxB,kBACI,aAAa,QAAQ,SAAS,OAAO,MAAM,WAC3C,aAAa,OAAO,SAAS,OAAO,MAAM,UAC5C;AACE,mCAAmB,4CAA4C;AAAA,cACnE;AAAA,YACJ;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ,CAAC;AAAA,MAED,gBAAY,sBAAO;AAAA,QACf,MAAM;AAAA,QACN,YAAY;AAAA,UACR,YAAY;AAAA,QAChB;AAAA,QACA,SAAS;AAAA,UACL,EAAE,OAAO,GAAG,OAAO,IAAI;AAAA,UACvB,EAAE,OAAO,GAAG,OAAO,IAAI;AAAA,UACvB,EAAE,OAAO,GAAG,OAAO,IAAI;AAAA,UACvB,EAAE,OAAO,GAAG,OAAO,IAAI;AAAA,UACvB,EAAE,OAAO,GAAG,OAAO,IAAI;AAAA,UACvB,EAAE,OAAO,GAAG,OAAO,IAAI;AAAA,UACvB,EAAE,OAAO,GAAG,OAAO,IAAI;AAAA,UACvB,EAAE,OAAO,GAAG,OAAO,IAAI;AAAA,UACvB,EAAE,OAAO,GAAG,OAAO,IAAI;AAAA,QAC3B;AAAA,QACA,OAAO;AAAA,MACX,CAAC;AAAA,IACL;AAAA,EACJ,CAAC;AAAA,EAED,UAAM,kBAAK;AAAA;AAAA;AAAA;AAAA;AAAA,IAKP,QAAQ;AAAA;AAAA,IAGR,QAAQ;AAAA,MACJ,WAAO,oBAAK,EAAE,YAAY,EAAE,YAAY,KAAK,EAAE,CAAC;AAAA,MAChD,aAAS,4BAAa,EAAE,KAAK,cAAc,MAAM,KAAK,CAAC;AAAA,MAEvD,UAAM,yBAAU;AAAA;AAAA,QAEZ,cAAc,EAAE,MAAM,MAAM;AAAA,MAChC,CAAC;AAAA,IACL;AAAA,EACJ,CAAC;AACL;;;ACtKA,oBAA4B;AAC5B,kBAA2B;AAG3B,qBAAkC;AAIlC,IAAI,gBAAgB,QAAQ,IAAI;AAChC,IAAI,CAAC,iBAAiB,QAAQ,IAAI,aAAa,cAAc;AAC3D,sBAAgB,2BAAY,EAAE,EAAE,SAAS,KAAK;AAChD;AAGA,IAAM,EAAE,SAAS,QAAI,wBAAW;AAAA,EAC9B,SAAS;AAAA,EACT,eAAe;AAAA;AAAA;AAAA;AAAA,EAKf,aAAa;AAAA,EACb,aAAa;AAAA;AAAA;AAAA,EAIb,eAAe;AAAA;AAAA;AAAA;AAAA,IAIb,QAAQ,CAAC,QAAQ,SAAS,UAAU;AAAA;AAAA;AAAA,EAItC;AACF,CAAC;AAKD,IAAM,gBAAgB,KAAK,KAAK,KAAK;AAGrC,IAAM,cAAU,kCAAkB;AAAA,EAChC,QAAQ;AAAA,EACR,QAAQ;AACV,CAAC;;;AF/CD,IAAO,mBAAQ;AAAA,MACX,qBAAO;AAAA,IACH,IAAI;AAAA,MACA,eAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAMf,UAAU;AAAA;AAAA,MAEV,KACI,QAAQ,IAAI,gBACZ;AAAA;AAAA,IAER;AAAA,IACA;AAAA,IACA;AAAA,EACJ,CAAC;AACL;",
  "names": ["import_core"]
}
