# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  matchesWon(where: MatchWhereInput! = {}, orderBy: [MatchOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: MatchWhereUniqueInput): [Match!]
  matchesWonCount(where: MatchWhereInput! = {}): Int
  matchesLost(where: MatchWhereInput! = {}, orderBy: [MatchOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: MatchWhereUniqueInput): [Match!]
  matchesLostCount(where: MatchWhereInput! = {}): Int
  createdAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  matchesWon: MatchManyRelationFilter
  matchesLost: MatchManyRelationFilter
  createdAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input MatchManyRelationFilter {
  every: MatchWhereInput
  some: MatchWhereInput
  none: MatchWhereInput
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  createdAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  matchesWon: MatchRelateToManyForUpdateInput
  matchesLost: MatchRelateToManyForUpdateInput
  createdAt: DateTime
}

input MatchRelateToManyForUpdateInput {
  disconnect: [MatchWhereUniqueInput!]
  set: [MatchWhereUniqueInput!]
  create: [MatchCreateInput!]
  connect: [MatchWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  matchesWon: MatchRelateToManyForCreateInput
  matchesLost: MatchRelateToManyForCreateInput
  createdAt: DateTime
}

input MatchRelateToManyForCreateInput {
  create: [MatchCreateInput!]
  connect: [MatchWhereUniqueInput!]
}

type Match {
  id: ID!
  date: DateTime
  game: Game
  winner: User
  winnerScore: Int
  loser: User
  loserScore: Int
}

input MatchWhereUniqueInput {
  id: ID
}

input MatchWhereInput {
  AND: [MatchWhereInput!]
  OR: [MatchWhereInput!]
  NOT: [MatchWhereInput!]
  id: IDFilter
  date: DateTimeNullableFilter
  game: GameWhereInput
  winner: UserWhereInput
  winnerScore: IntFilter
  loser: UserWhereInput
  loserScore: IntFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntFilter
}

input MatchOrderByInput {
  id: OrderDirection
  date: OrderDirection
  winnerScore: OrderDirection
  loserScore: OrderDirection
}

input MatchUpdateInput {
  date: DateTime
  game: GameRelateToOneForUpdateInput
  winner: UserRelateToOneForUpdateInput
  winnerScore: Int
  loser: UserRelateToOneForUpdateInput
  loserScore: Int
}

input GameRelateToOneForUpdateInput {
  create: GameCreateInput
  connect: GameWhereUniqueInput
  disconnect: Boolean
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input MatchUpdateArgs {
  where: MatchWhereUniqueInput!
  data: MatchUpdateInput!
}

input MatchCreateInput {
  date: DateTime
  game: GameRelateToOneForCreateInput
  winner: UserRelateToOneForCreateInput
  winnerScore: Int
  loser: UserRelateToOneForCreateInput
  loserScore: Int
}

input GameRelateToOneForCreateInput {
  create: GameCreateInput
  connect: GameWhereUniqueInput
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type Game {
  id: ID!
  title: String
  matches(where: MatchWhereInput! = {}, orderBy: [MatchOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: MatchWhereUniqueInput): [Match!]
  matchesCount(where: MatchWhereInput! = {}): Int
  date: DateTime
}

input GameWhereUniqueInput {
  id: ID
}

input GameWhereInput {
  AND: [GameWhereInput!]
  OR: [GameWhereInput!]
  NOT: [GameWhereInput!]
  id: IDFilter
  title: StringFilter
  matches: MatchManyRelationFilter
  date: DateTimeNullableFilter
}

input GameOrderByInput {
  id: OrderDirection
  title: OrderDirection
  date: OrderDirection
}

input GameUpdateInput {
  title: String
  matches: MatchRelateToManyForUpdateInput
  date: DateTime
}

input GameUpdateArgs {
  where: GameWhereUniqueInput!
  data: GameUpdateInput!
}

input GameCreateInput {
  title: String
  matches: MatchRelateToManyForCreateInput
  date: DateTime
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createMatch(data: MatchCreateInput!): Match
  createMatches(data: [MatchCreateInput!]!): [Match]
  updateMatch(where: MatchWhereUniqueInput!, data: MatchUpdateInput!): Match
  updateMatches(data: [MatchUpdateArgs!]!): [Match]
  deleteMatch(where: MatchWhereUniqueInput!): Match
  deleteMatches(where: [MatchWhereUniqueInput!]!): [Match]
  createGame(data: GameCreateInput!): Game
  createGames(data: [GameCreateInput!]!): [Game]
  updateGame(where: GameWhereUniqueInput!, data: GameUpdateInput!): Game
  updateGames(data: [GameUpdateArgs!]!): [Game]
  deleteGame(where: GameWhereUniqueInput!): Game
  deleteGames(where: [GameWhereUniqueInput!]!): [Game]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  matches(where: MatchWhereInput! = {}, orderBy: [MatchOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: MatchWhereUniqueInput): [Match!]
  match(where: MatchWhereUniqueInput!): Match
  matchesCount(where: MatchWhereInput! = {}): Int
  games(where: GameWhereInput! = {}, orderBy: [GameOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: GameWhereUniqueInput): [Game!]
  game(where: GameWhereUniqueInput!): Game
  gamesCount(where: GameWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
